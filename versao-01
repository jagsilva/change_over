// ENTRADAS ANALOGICAS EMISSORES
#define TX1_FWD A0
#define TX2_FWD A1
#define TX1_LIMITE_FWD A2
#define TX2_LIMITE_FWD A3

// ENTRADAS DIGITAIS EMISSORES
#define TX1_LIGADO 2
#define TX2_LIGADO 3

// SAIDAS DIGITAIS EMISSORES
#define LIGA_TX1 4
#define LIGA_TX2 5
#define DESLIGA_TX1 6
#define DESLIGA_TX2 7

// SAIDAS DIGITAIS RELE
#define COMUTA_RELE_PARA_ORIGEM 8
#define COMUTA_RELE_PARA_RESERVA 9

// ENTRADAS DIGITAIS RELE
#define RELE_NA_ORIGEM 10
#define RELE_NA_RESERVA 11

// ENTRADA RESET
#define BOTAO_RESET 12

enum State {
  SISTEMA_NORMAL,
  SISTEMA_EM_FALHA,
  SISTEMA_EM_COMUTACAO,
  SISTEMA_EM_RESERVA
};

State estadoAtual = SISTEMA_NORMAL;

/*
LE A POTENCIA O TX1 E O LIMITE. SE A POTENCIA ESTIVER OK DEVOLVE 1 SENAO DEVOLVE 0
LE O ESTADO DO EMISSOR. SE ESTIVER A 0 DEVOLVE 0
*/
int tx1_check_fwd(){
  float tx1_fwd = analogRead(TX1_FWD) * (5.0 / 1023.0);
  float tx1_limite_fwd = analogRead(TX1_LIMITE_FWD) * (5.0 / 1023.0);
  int tx1_on_off = digitalRead(TX1_LIGADO);
  Serial.print("1. TX1 FWD: ");
  Serial.print(tx1_fwd);
  Serial.print("V - TX1 LIMITE: ");
  Serial.print(tx1_limite_fwd);
  Serial.print("V - TX1 ON/OFF: ");
  Serial.println(tx1_on_off);
delay(1000); //DEBUG
  if(tx1_fwd < tx1_limite_fwd || tx1_on_off == 0) {
    return 0;
  }
  else{
    return 1;
  }
}

void tx2_check_fwd(){
  float tx2_fwd = analogRead(TX2_FWD) * (5.0 / 1023.0);
  float tx2_limite_fwd = analogRead(TX2_LIMITE_FWD) * (5.0 / 1023.0);
  int tx2_on_off = digitalRead(TX2_LIGADO);
  Serial.print("2. TX2 FWD: ");
  Serial.print(tx2_fwd);
  Serial.print("V - TX2 LIMITE: ");
  Serial.print(tx2_limite_fwd);
  Serial.print("V - TX2 ON/OFF: ");
  Serial.println(tx2_on_off);
delay(1000); //DEBUG
}

void setup() {
  pinMode(TX1_LIGADO, INPUT);
//  digitalWrite(TX1_LIGADO,LOW);
  pinMode(TX2_LIGADO, INPUT);
//  digitalWrite(TX2_LIGADO,LOW);
  pinMode(LIGA_TX1, OUTPUT);
  digitalWrite(LIGA_TX1,LOW);
  pinMode(LIGA_TX2, OUTPUT);
  digitalWrite(LIGA_TX2,LOW);
  pinMode(DESLIGA_TX1, OUTPUT);
  digitalWrite(DESLIGA_TX1,LOW);
  pinMode(DESLIGA_TX2, OUTPUT);
  digitalWrite(DESLIGA_TX2,LOW);
  pinMode(COMUTA_RELE_PARA_ORIGEM, OUTPUT);
  digitalWrite(COMUTA_RELE_PARA_ORIGEM,LOW);
  pinMode(COMUTA_RELE_PARA_RESERVA, OUTPUT);
  digitalWrite(COMUTA_RELE_PARA_RESERVA,LOW);
  pinMode(RELE_NA_ORIGEM, INPUT);
  pinMode(RELE_NA_RESERVA, INPUT);

  Serial.begin(115200);
  Serial.println("SISTEMA INICIALIZADO");

}

int tempo_up_para_desligar_emissor = 1000;
int tempo_up_para_ligar_emissor = 1000;
int tempo_de_espera_para_arranque = 10000;
int tempo_rotacao_rele = 10000;

int rearma_tx = 0;
int falha = 0;
unsigned long inicio_do_rearme = 0;
int em_pausa_para_verificar_potencia = 0;
int checa_potencia_emissor = 0;
int desliga_emissores = 0;
int roda_o_rele = 0;
int aguarda_rele_posicao_reserva = 0;
unsigned long inicio_movimento_rele = 0;
int liga_tx_reserva = 0;

void loop() {
  //Serial.println(".");
  //verifica_se_carregaram_no_reset();
  if(digitalRead(BOTAO_RESET) == 1){
    Serial.println("R .Desliga os emissores");
    digitalWrite(DESLIGA_TX1, HIGH);
    digitalWrite(DESLIGA_TX2, HIGH);

    Serial.println("R . Comuta o rele");
    digitalWrite(COMUTA_RELE_PARA_RESERVA, LOW);
    digitalWrite(COMUTA_RELE_PARA_ORIGEM, HIGH);

    Serial.println("R . Aguarda o tempo de comutação");


    Serial.println("R . Verifica de está na posição");

    Serial.println("R . Liga os emissores");

    Serial.println("Volta ao estado normal");
    estadoAtual = SISTEMA_NORMAL;
  }

  //verifica_se_recebeu_comando_externo();

  switch (estadoAtual) {
    case SISTEMA_NORMAL:
      if(tx1_check_fwd() == 0){
        estadoAtual = SISTEMA_EM_FALHA;
        rearma_tx = 1;
        falha = 0;
      }
      break;

    case SISTEMA_EM_FALHA:
      /* desliga o tx1 e volta a ligar*/
      if(rearma_tx == 1){
        /* desliga tx1*/
        Serial.println("2 . DESLIGA EMISSOR");
        digitalWrite(DESLIGA_TX1, HIGH);
delay(2000);
        delay(tempo_up_para_desligar_emissor);
        digitalWrite(DESLIGA_TX1, LOW);

        /* liga tx1*/
        Serial.println("2 . LIGA EMISSOR");
delay(2000);
        digitalWrite(LIGA_TX1, HIGH);
        delay(tempo_up_para_ligar_emissor);
        digitalWrite(LIGA_TX1, LOW);

        /* comeca a contar tempo */
        inicio_do_rearme = millis();
        rearma_tx = 0;
        em_pausa_para_verificar_potencia = 1;
        Serial.print("2 . AGURDA ARRANQUE EMISSOR : 10s");
      }

      /* espera um pouco apos tentar ligar o emissor */
      if(em_pausa_para_verificar_potencia == 1) {
        if(millis() - inicio_do_rearme >= tempo_de_espera_para_arranque){
            em_pausa_para_verificar_potencia = 0;
            checa_potencia_emissor = 1;
        }
      }

      /* ve se o tx esta com potencia ok*/
      if(checa_potencia_emissor == 1) {
        Serial.println("2 . CHECA POTENCIA EMISSOR ");
        if(tx1_check_fwd() == 0) {
          falha = falha + 1;
          checa_potencia_emissor = 0;
          rearma_tx = 1;
        }
        else {
          estadoAtual = SISTEMA_NORMAL;
          Serial.println("2 . SISTEMA REGRESSA AO ESTADO NORMAL");
        }
      }
      /* se tentou ligar o equipamento 3x e nao consegui, comuta para reserva */
      if(falha >= 3){
        Serial.println("2 . SISTEMA EM FALHA : PREPARA COMUTACAO");
        estadoAtual = SISTEMA_EM_COMUTACAO;
        desliga_emissores = 1;
      }
      break;

    case SISTEMA_EM_COMUTACAO:
      /* desliga emissores */
      if(desliga_emissores == 1){
        Serial.println("3 . DESLIGA EMISSORES");
        digitalWrite(DESLIGA_TX1, HIGH);
        digitalWrite(DESLIGA_TX2, HIGH);
        delay(tempo_up_para_desligar_emissor);
delay(2000);
        //digitalWrite(DESLIGA_TX1, LOW);
        //digitalWrite(DESLIGA_TX2, LOW);
        desliga_emissores = 0;
        roda_o_rele = 1;
      }

      /* roda o rele */
      if(roda_o_rele == 1){
        Serial.println("3 . RODA O RELE");
        digitalWrite(COMUTA_RELE_PARA_ORIGEM, LOW);
        digitalWrite(COMUTA_RELE_PARA_RESERVA, HIGH);
        roda_o_rele = 0;
        aguarda_rele_posicao_reserva = 1;
        inicio_movimento_rele = millis();
        Serial.print("3 . AGUARDA MOVIMENTO DO RELE ATE A POSICAO RESERVA: 10s");
      }
      /* aguarda que o tempo de rotacao do rele ou que chegue ao final de curso */
      /* passa para o estado seguinte */
      if (aguarda_rele_posicao_reserva == 1) {
        
        if(millis() - inicio_movimento_rele >= tempo_rotacao_rele){
          /* desliga o rele. sistema encravado */
          digitalWrite(COMUTA_RELE_PARA_RESERVA, LOW);
          aguarda_rele_posicao_reserva = 0;
          Serial.println("3 . SISTEMA ENCRAVADO");
        }
        /* Se ja esta na posicao desejada liga a reserva*/
        if(digitalRead(RELE_NA_RESERVA) == HIGH){
          estadoAtual = SISTEMA_EM_RESERVA;
          liga_tx_reserva = 1;
          Serial.println("3 . SISTEMA CHEGOU AO FIM DO MOVIMENTO");
        }
      }
      break;

    case SISTEMA_EM_RESERVA:
      /* liga o emissor de reserva */
      if(liga_tx_reserva == 1) {
        Serial.println("4 . LIGA EMISSOR DE RESERVA");
        digitalWrite(LIGA_TX2, HIGH);
        delay(tempo_up_para_ligar_emissor);
        digitalWrite(LIGA_TX2, LOW);        
        liga_tx_reserva == 0;
      }
      /* verifica se o emissor tem potencia */
      tx2_check_fwd();
      break;


  }

}
